// Complete the minimumBribes function below.
// q = 1 2 **5 -3 **7 **8  -6 ----4
//     1 2   3  4   5   6   7     8
// 5 bribes 3 & 4
// 7 bribes 4 & 6
// 8 bribes 4 & 6

//Reduce the inner loops iteration count.
The problem is the inner loop is looping over too many items. The result is that you spend too much time processing data you know is irrelevant.

As the function should exit if it detects a position has made over 2 bribes, you need only have the inner loop check positions down 2 from the item you are checking, and not from the start of the line.
--------
// i = 0
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = -1 q[j] = N/A and q[i] = 1 since N/A > 1 is false and j < i is true, j++
// j = 0 q[j] = 1 and q[i] = 1 since 1 > 1 is false and j < i is not true, stops.
--------
// i = 1
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = 0 q[j] = 1 and q[i] = 2 since 1 > 2 is false and j < i is true, j++
// j = 1 q[j] = 2 and q[i] = 2 since j < i is not true, stops.
--------
// i = 2
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = 3 q[j] = 3 and q[i] = 5  since 3 > 5 is false and j < i is false, stops.
--------
// i = 3
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = 1 q[j] = 2 and q[i] = 3 since 2 > 3 is false and j < i is true, j++
// j = 2 q[j] = 5 and q[i] = 3 since 5 > 3 is true and j < i is true, bribe++ and j++
// j = 3 q[j] = 3 and q[i] = 3 since 3 > 3 is false and j < i is not true, stops.
--------
// i = 4
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = 5 q[j] = 8 and q[i] = 7 since 8 > 7 is true and j < i is not true, bribe++ and stops.
--------
// i = 5
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = 6 q[j] = 6 and q[i] = 8 since 6 > 8 is false and j < i is not true, stops.
--------
// i = 6
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = 4 q[j] = 7 and q[i] = 6 since 7 > 6 is true and j < i is true, bribes++ and j++
// j = 5 q[j] = 8 and q[i] = 6 since 8 > 6 is true and j < i is true, bribes++ and j++
// j = 6 q[j] = 6 and q[i] = 6 since 6 > 6 is false and j < i is not true, stops.
--------
// i = 7
// 1, 2, 5, 3, 7, 8, 6, 4
// j = queue[i] - 2
// j = 2 q[j] = 5 and q[i] = 4 since 5 > 4 is true and j < i is true, bribes++ and j++
// j = 3 q[j] = 3 and q[i] = 4 since 3 > 4 is false and j < i is true, j++
// j = 4 q[j] = 7 and q[i] = 4 since 7 > 4 is true and j < i is true, bribes++ and j++
// j = 5 q[j] = 8 and q[i] = 4 since 8 > 4 is true and j < i is true, bribes++ and j++
// j = 6 q[j] = 6 and q[i] = 4 since 6 > 4 is true and j < i is true, bribes++ and j++
// j = 7 q[j] = 4 and q[i] = 4 since 4 > 4 is false and j < i is not true, stops.

Solution:

function minimumBribes(queue) {
  let chaotic = false
  var bribes = 0
  for (let i = 0; i < queue.length; i++) {
    if (queue[i] - (i+1) > 2) { chaotic = true }
      for (let j = queue[i] - 2; j < i; j++) {
      if (queue[j] > queue[i]) { bribes++ }
      }
    }
  if(chaotic === true){
  console.log("Too chaotic")
  } else {
  console.log(bribes)
  }
}
